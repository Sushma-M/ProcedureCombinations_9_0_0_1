/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testingprocedurecombinations.classicmodelsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.dao.procedure.WMProcedureExecutor;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testingprocedurecombinations.classicmodelsdb.service.ClassicModelsDBProcedureExecutorService;
import com.testingprocedurecombinations.classicmodelsdb.models.procedure.*;

@RestController(value = "ClassicModelsDB.ProcedureExecutionController")
@RequestMapping("/ClassicModelsDB/procedureExecutor")
@Api(value = "ProcedureExecutionController", description = "controller class for procedure execution")
public class ProcedureExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProcedureExecutionController.class);

    @Autowired
    private ClassicModelsDBProcedureExecutorService procedureService;

    @RequestMapping(value = "/procedure/execute/Procedure_OUT_OUT_IN", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Procedure with out, out, in")
    public List<ProcedureOutOutInResponse> executeProcedure_OUT_OUT_IN(@RequestParam(value = "offCode", required = false) String offCode, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_OUT_OUT_IN");
        ProcedureOutOutInResponse _result = procedureService.executeProcedure_OUT_OUT_IN(offCode);
        LOGGER.debug("got the result for v1 named procedure: Procedure_OUT_OUT_IN, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_OUT_OUT_INOUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Procedure with out, out and inout")
    public List<ProcedureOutOutInoutResponse> executeProcedure_OUT_OUT_INOUT(@RequestParam(value = "empNumber", required = false) Integer empNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_OUT_OUT_INOUT");
        ProcedureOutOutInoutResponse _result = procedureService.executeProcedure_OUT_OUT_INOUT(empNumber);
        LOGGER.debug("got the result for v1 named procedure: Procedure_OUT_OUT_INOUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

}


