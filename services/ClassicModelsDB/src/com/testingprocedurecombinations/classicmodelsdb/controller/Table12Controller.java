/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testingprocedurecombinations.classicmodelsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testingprocedurecombinations.classicmodelsdb.Table12;
import com.testingprocedurecombinations.classicmodelsdb.service.Table12Service;


/**
 * Controller object for domain model class Table12.
 * @see Table12
 */
@RestController("ClassicModelsDB.Table12Controller")
@Api(value = "Table12Controller", description = "Exposes APIs to work with Table12 resource.")
@RequestMapping("/ClassicModelsDB/Table12")
public class Table12Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table12Controller.class);

    @Autowired
	@Qualifier("ClassicModelsDB.Table12Service")
	private Table12Service table12Service;

	@ApiOperation(value = "Creates a new Table12 instance.")
	@RequestMapping(method = RequestMethod.POST)
        @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Table12 createTable12(@RequestBody Table12 table12) {
		LOGGER.debug("Create Table12 with information: {}" , table12);

		table12 = table12Service.create(table12);
		LOGGER.debug("Created Table12 with information: {}" , table12);

	    return table12;
	}


    @ApiOperation(value = "Returns the Table12 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table12 getTable12(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table12 with id: {}" , id);

        Table12 foundTable12 = table12Service.getById(id);
        LOGGER.debug("Table12 details with id: {}" , foundTable12);

        return foundTable12;
    }

    @ApiOperation(value = "Updates the Table12 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table12 editTable12(@PathVariable("id") Integer id, @RequestBody Table12 table12) throws EntityNotFoundException {
        LOGGER.debug("Editing Table12 with id: {}" , table12.getId());

        table12.setId(id);
        table12 = table12Service.update(table12);
        LOGGER.debug("Table12 details with id: {}" , table12);

        return table12;
    }

    @ApiOperation(value = "Deletes the Table12 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable12(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table12 with id: {}" , id);

        Table12 deletedTable12 = table12Service.delete(id);

        return deletedTable12 != null;
    }

    /**
     * @deprecated Use {@link #findTable12s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table12 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table12> searchTable12sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table12s list");
        return table12Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Table12 instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table12> findTable12s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table12s list");
        return table12Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable12s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table12Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table12 instances.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable12s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table12s");
		return table12Service.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table12Service instance
	 */
	protected void setTable12Service(Table12Service service) {
		this.table12Service = service;
	}

}

