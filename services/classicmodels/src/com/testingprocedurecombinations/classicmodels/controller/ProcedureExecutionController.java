/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testingprocedurecombinations.classicmodels.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.dao.procedure.WMProcedureExecutor;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testingprocedurecombinations.classicmodels.service.ClassicmodelsProcedureExecutorService;
import com.testingprocedurecombinations.classicmodels.models.procedure.*;

@RestController(value = "Classicmodels.ProcedureExecutionController")
@RequestMapping("/classicmodels/procedureExecutor")
@Api(value = "ProcedureExecutionController", description = "controller class for procedure execution")
public class ProcedureExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProcedureExecutionController.class);

    @Autowired
    private ClassicmodelsProcedureExecutorService procedureService;

    @RequestMapping(value = "/procedure/execute/Procedure_INOUT_OUT_OUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "INOUT-- Date OUT -- Date OUT -- String")
    public List<ProcedureInoutOutOutResponse> executeProcedure_INOUT_OUT_OUT(@RequestParam(value = "ordrDate", required = false) Date ordrDate, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_INOUT_OUT_OUT");
        ProcedureInoutOutOutResponse _result = procedureService.executeProcedure_INOUT_OUT_OUT(ordrDate);
        LOGGER.debug("got the result for v1 named procedure: Procedure_INOUT_OUT_OUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_INOUT_IN_IN", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "INOUT - INT IN - INT IN - INT")
    public List<ProcedureInoutInInResponse> executeProcedure_INOUT_IN_IN(@RequestParam(value = "result1", required = false) Integer result1, @RequestParam(value = "numerator", required = false) Integer numerator, @RequestParam(value = "denominator", required = false) Integer denominator, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_INOUT_IN_IN");
        ProcedureInoutInInResponse _result = procedureService.executeProcedure_INOUT_IN_IN(result1, numerator, denominator);
        LOGGER.debug("got the result for v1 named procedure: Procedure_INOUT_IN_IN, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_INOUT_IN_INOUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "INOUT - DOUBLE IN - INT INOUT - INT")
    public List<ProcedureInoutInInoutResponse> executeProcedure_INOUT_IN_INOUT(@RequestParam(value = "result1", required = false) Double result1, @RequestParam(value = "numerator", required = false) Integer numerator, @RequestParam(value = "denominator", required = false) Integer denominator, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_INOUT_IN_INOUT");
        ProcedureInoutInInoutResponse _result = procedureService.executeProcedure_INOUT_IN_INOUT(result1, numerator, denominator);
        LOGGER.debug("got the result for v1 named procedure: Procedure_INOUT_IN_INOUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_INOUT_IN_OUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "INOUT - INT IN - INT OUT - DOUBLE")
    public List<ProcedureInoutInOutResponse> executeProcedure_INOUT_IN_OUT(@RequestParam(value = "numerator", required = false) Integer numerator, @RequestParam(value = "denominator", required = false) Integer denominator, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_INOUT_IN_OUT");
        ProcedureInoutInOutResponse _result = procedureService.executeProcedure_INOUT_IN_OUT(numerator, denominator);
        LOGGER.debug("got the result for v1 named procedure: Procedure_INOUT_IN_OUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_IN_OUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "IN - INT OUT - STRING")
    public List<ProcedureInOutResponse> executeProcedure_IN_OUT(@RequestParam(value = "CustomerNumber", required = false) Integer customerNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_IN_OUT");
        ProcedureInOutResponse _result = procedureService.executeProcedure_IN_OUT(customerNumber);
        LOGGER.debug("got the result for v1 named procedure: Procedure_IN_OUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_IN_INOUT_IN", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "IN - INT INOUT - INT IN - INT")
    public List<ProcedureInInoutInResponse> executeProcedure_IN_INOUT_IN(@RequestParam(value = "numerator", required = false) Integer numerator, @RequestParam(value = "res", required = false) Integer res, @RequestParam(value = "denominator", required = false) Integer denominator, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_IN_INOUT_IN");
        ProcedureInInoutInResponse _result = procedureService.executeProcedure_IN_INOUT_IN(numerator, res, denominator);
        LOGGER.debug("got the result for v1 named procedure: Procedure_IN_INOUT_IN, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_OUT_IN_IN", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "OUT - INT IN - DATE IN - STRING")
    public List<ProcedureOutInInResponse> executeProcedure_OUT_IN_IN(@RequestParam(value = "custNumber", required = false) Integer custNumber, @RequestParam(value = "checkNum", required = false) String checkNum, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_OUT_IN_IN");
        ProcedureOutInInResponse _result = procedureService.executeProcedure_OUT_IN_IN(custNumber, checkNum);
        LOGGER.debug("got the result for v1 named procedure: Procedure_OUT_IN_IN, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_INOUT_INOUT_IN", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "INOUT - INT INOUT - INT INOUT - INT IN - INT")
    public List<ProcedureInoutInoutInResponse> executeProcedure_INOUT_INOUT_IN(@RequestParam(value = "count1", required = false) Integer count1, @RequestParam(value = "count2", required = false) Integer count2, @RequestParam(value = "count3", required = false) Integer count3, @RequestParam(value = "inc", required = false) Integer inc, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_INOUT_INOUT_IN");
        ProcedureInoutInoutInResponse _result = procedureService.executeProcedure_INOUT_INOUT_IN(count1, count2, count3, inc);
        LOGGER.debug("got the result for v1 named procedure: Procedure_INOUT_INOUT_IN, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_IN_INOUT_INOUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "IN - DATE INOUT - INT INOUT - DATE")
    public List<ProcedureInInoutInoutResponse> executeProcedure_IN_INOUT_INOUT(@RequestParam(value = "reqDate", required = false) Date reqDate, @RequestParam(value = "ordNumber", required = false) Integer ordNumber, @RequestParam(value = "shipDate", required = false) Date shipDate, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_IN_INOUT_INOUT");
        ProcedureInInoutInoutResponse _result = procedureService.executeProcedure_IN_INOUT_INOUT(reqDate, ordNumber, shipDate);
        LOGGER.debug("got the result for v1 named procedure: Procedure_IN_INOUT_INOUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_WithoutAnyParams", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Without Any Params")
    public List<ProcedureWithoutAnyParamsResponseContent> executeProcedure_WithoutAnyParams(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_WithoutAnyParams");
        ProcedureWithoutAnyParamsResponse _result = procedureService.executeProcedure_WithoutAnyParams();
        LOGGER.debug("got the result for v1 named procedure: Procedure_WithoutAnyParams, result:{}", _result);
        return _result.getContent();
    }

    @RequestMapping(value = "/procedure/execute/Procedure_INOUT_INOUT_INOUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "INOUT- INT INOUT- INT INOUT- DOUBLE")
    public List<ProcedureInoutInoutInoutResponse> executeProcedure_INOUT_INOUT_INOUT(@RequestParam(value = "numerator", required = false) Integer numerator, @RequestParam(value = "denominator", required = false) Integer denominator, @RequestParam(value = "result1", required = false) Double result1, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_INOUT_INOUT_INOUT");
        ProcedureInoutInoutInoutResponse _result = procedureService.executeProcedure_INOUT_INOUT_INOUT(numerator, denominator, result1);
        LOGGER.debug("got the result for v1 named procedure: Procedure_INOUT_INOUT_INOUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_OUT_IN_INOUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "OUT - DATE IN - DATE INOUT - INT")
    public List<ProcedureOutInInoutResponse> executeProcedure_OUT_IN_INOUT(@RequestParam(value = "reqDate", required = false) Date reqDate, @RequestParam(value = "ordNumber", required = false) Integer ordNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_OUT_IN_INOUT");
        ProcedureOutInInoutResponse _result = procedureService.executeProcedure_OUT_IN_INOUT(reqDate, ordNumber);
        LOGGER.debug("got the result for v1 named procedure: Procedure_OUT_IN_INOUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_IN_INOUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "IN - INT INOUT - STRING")
    public List<ProcedureInInoutResponse> executeProcedure_IN_INOUT(@RequestParam(value = "custnum", required = false) Integer custnum, @RequestParam(value = "customerLevel", required = false) String customerLevel, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_IN_INOUT");
        ProcedureInInoutResponse _result = procedureService.executeProcedure_IN_INOUT(custnum, customerLevel);
        LOGGER.debug("got the result for v1 named procedure: Procedure_IN_INOUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_IN_IN", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "IN - STRING IN - INT")
    public List<ProcedureInInResponseContent> executeProcedure_IN_IN(@RequestParam(value = "empFName", required = false) String empFname, @RequestParam(value = "empNumber", required = false) Integer empNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_IN_IN");
        ProcedureInInResponse _result = procedureService.executeProcedure_IN_IN(empFname, empNumber);
        LOGGER.debug("got the result for v1 named procedure: Procedure_IN_IN, result:{}", _result);
        return _result.getContent();
    }

    @RequestMapping(value = "/procedure/execute/Procedure_INOUT_INOUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.UNAVAILABLE)
    @ApiOperation(value = "INOUT - INT INOUT - STRING")
    public List<ProcedureInoutInoutResponse> executeProcedure_INOUT_INOUT(@RequestParam(value = "custnum", required = false) Integer custnum, @RequestParam(value = "customerLevel", required = false) String customerLevel, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_INOUT_INOUT");
        ProcedureInoutInoutResponse _result = procedureService.executeProcedure_INOUT_INOUT(custnum, customerLevel);
        LOGGER.debug("got the result for v1 named procedure: Procedure_INOUT_INOUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_INOUT_INOUT_OUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "INOUT - INT INOUT - INT OUT - DOUBLE")
    public List<ProcedureInoutInoutOutResponse> executeProcedure_INOUT_INOUT_OUT(@RequestParam(value = "numerator", required = false) Integer numerator, @RequestParam(value = "denominator", required = false) Integer denominator, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_INOUT_INOUT_OUT");
        ProcedureInoutInoutOutResponse _result = procedureService.executeProcedure_INOUT_INOUT_OUT(numerator, denominator);
        LOGGER.debug("got the result for v1 named procedure: Procedure_INOUT_INOUT_OUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_IN_IsList", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "IN - STRING Check IsList")
    public List<ProcedureInIsListResponseContent> executeProcedure_IN_IsList(@RequestParam(value = "custNumber", required = false) String custNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_IN_IsList");
        ProcedureInIsListResponse _result = procedureService.executeProcedure_IN_IsList(custNumber);
        LOGGER.debug("got the result for v1 named procedure: Procedure_IN_IsList, result:{}", _result);
        return _result.getContent();
    }

    @RequestMapping(value = "/procedure/execute/Procedure_OUT_IN_OUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "OUT - STRING IN - STRING OUT - STRING")
    public List<ProcedureOutInOutResponse> executeProcedure_OUT_IN_OUT(@RequestParam(value = "prodLine", required = false) String prodLine, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_OUT_IN_OUT");
        ProcedureOutInOutResponse _result = procedureService.executeProcedure_OUT_IN_OUT(prodLine);
        LOGGER.debug("got the result for v1 named procedure: Procedure_OUT_IN_OUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_IN_OUT_OUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "IN - INT OUT - INT  OUT - INT OUT - INT  OUT - INT OUT - INT  OUT - INT")
    public List<ProcedureInOutOutResponse> executeProcedure_IN_OUT_OUT(@RequestParam(value = "cutomerNumber", required = false) Integer cutomerNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_IN_OUT_OUT");
        ProcedureInOutOutResponse _result = procedureService.executeProcedure_IN_OUT_OUT(cutomerNumber);
        LOGGER.debug("got the result for v1 named procedure: Procedure_IN_OUT_OUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_Sysparam", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Procedure_Sysparam")
    public List<ProcedureSysparamResponse> executeProcedure_Sysparam(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_Sysparam");
        ProcedureSysparamResponse _result = procedureService.executeProcedure_Sysparam();
        LOGGER.debug("got the result for v1 named procedure: Procedure_Sysparam, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_IN_OUT_INOUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "IN - INT OUT - FLOAT INOUT - INT")
    public List<ProcedureInOutInoutResponse> executeProcedure_IN_OUT_INOUT(@RequestParam(value = "numerator", required = false) Integer numerator, @RequestParam(value = "denominator", required = false) Integer denominator, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_IN_OUT_INOUT");
        ProcedureInOutInoutResponse _result = procedureService.executeProcedure_IN_OUT_INOUT(numerator, denominator);
        LOGGER.debug("got the result for v1 named procedure: Procedure_IN_OUT_INOUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_OUT_INOUT_OUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "OUT - STRING INOUT - STRING OUT - STRING")
    public List<ProcedureOutInoutOutResponse> executeProcedure_OUT_INOUT_OUT(@RequestParam(value = "prodCode", required = false) String prodCode, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_OUT_INOUT_OUT");
        ProcedureOutInoutOutResponse _result = procedureService.executeProcedure_OUT_INOUT_OUT(prodCode);
        LOGGER.debug("got the result for v1 named procedure: Procedure_OUT_INOUT_OUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_OUT_IN", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "OUT - STRING IN - INT")
    public List<ProcedureOutInResponse> executeProcedure_OUT_IN(@RequestParam(value = "empNumber", required = false) Integer empNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_OUT_IN");
        ProcedureOutInResponse _result = procedureService.executeProcedure_OUT_IN(empNumber);
        LOGGER.debug("got the result for v1 named procedure: Procedure_OUT_IN, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_OUT_INOUT_IN", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "OUT - DATE INOUT- DATE IN - INT")
    public List<ProcedureOutInoutInResponse> executeProcedure_OUT_INOUT_IN(@RequestParam(value = "reqDate", required = false) Date reqDate, @RequestParam(value = "ordNumber", required = false) Integer ordNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_OUT_INOUT_IN");
        ProcedureOutInoutInResponse _result = procedureService.executeProcedure_OUT_INOUT_IN(reqDate, ordNumber);
        LOGGER.debug("got the result for v1 named procedure: Procedure_OUT_INOUT_IN, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_OUT_OUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "OUT - STRING OUT - STRING")
    public List<ProcedureOutOutResponse> executeProcedure_OUT_OUT(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_OUT_OUT");
        ProcedureOutOutResponse _result = procedureService.executeProcedure_OUT_OUT();
        LOGGER.debug("got the result for v1 named procedure: Procedure_OUT_OUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_INOUT_OUT_IN", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "INOUT - INT OUT - DOUBLE  IN - INT")
    public List<ProcedureInoutOutInResponse> executeProcedure_INOUT_OUT_IN(@RequestParam(value = "numerator", required = false) Integer numerator, @RequestParam(value = "denominator", required = false) Integer denominator, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_INOUT_OUT_IN");
        ProcedureInoutOutInResponse _result = procedureService.executeProcedure_INOUT_OUT_IN(numerator, denominator);
        LOGGER.debug("got the result for v1 named procedure: Procedure_INOUT_OUT_IN, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_IN_IN_OUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "IN - DATE IN - INT OUT - DATE")
    public List<ProcedureInInOutResponse> executeProcedure_IN_IN_OUT(@RequestParam(value = "RequiredDate", required = false) Date requiredDate, @RequestParam(value = "OrderNumber", required = false) Integer orderNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_IN_IN_OUT");
        ProcedureInInOutResponse _result = procedureService.executeProcedure_IN_IN_OUT(requiredDate, orderNumber);
        LOGGER.debug("got the result for v1 named procedure: Procedure_IN_IN_OUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_OUT_INOUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "OUT - STRING INOUT - STRING")
    public List<ProcedureOutInoutResponse> executeProcedure_OUT_INOUT(@RequestParam(value = "prodLine", required = false) String prodLine, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_OUT_INOUT");
        ProcedureOutInoutResponse _result = procedureService.executeProcedure_OUT_INOUT(prodLine);
        LOGGER.debug("got the result for v1 named procedure: Procedure_OUT_INOUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_INOUT_OUT_INOUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "INOUT- INT OUT - DOUBLE INOUT - INT")
    public List<ProcedureInoutOutInoutResponse> executeProcedure_INOUT_OUT_INOUT(@RequestParam(value = "numerator", required = false) Integer numerator, @RequestParam(value = "denominator", required = false) Integer denominator, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_INOUT_OUT_INOUT");
        ProcedureInoutOutInoutResponse _result = procedureService.executeProcedure_INOUT_OUT_INOUT(numerator, denominator);
        LOGGER.debug("got the result for v1 named procedure: Procedure_INOUT_OUT_INOUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_OUT_INOUT_INOUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "OUT - DATE INOUT - DATE INOUT - INT")
    public List<ProcedureOutInoutInoutResponse> executeProcedure_OUT_INOUT_INOUT(@RequestParam(value = "reqDate", required = false) Date reqDate, @RequestParam(value = "ordNumber", required = false) Integer ordNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_OUT_INOUT_INOUT");
        ProcedureOutInoutInoutResponse _result = procedureService.executeProcedure_OUT_INOUT_INOUT(reqDate, ordNumber);
        LOGGER.debug("got the result for v1 named procedure: Procedure_OUT_INOUT_INOUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_INOUT_IN", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.UNAVAILABLE)
    @ApiOperation(value = "INOUT - DATE IN - INT")
    public List<ProcedureInoutInResponse> executeProcedure_INOUT_IN(@RequestParam(value = "GiveRequiredDateGetShippedDate", required = false) Date giveRequiredDateGetShippedDate, @RequestParam(value = "orderNumber", required = false) Integer orderNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_INOUT_IN");
        ProcedureInoutInResponse _result = procedureService.executeProcedure_INOUT_IN(giveRequiredDateGetShippedDate, orderNumber);
        LOGGER.debug("got the result for v1 named procedure: Procedure_INOUT_IN, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_OUT_OUT_OUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.UNAVAILABLE)
    @ApiOperation(value = "OUT - INT OUT - INT OUT - INT OUT - INT OUT - INT OUT - INT")
    public List<ProcedureOutOutOutResponse> executeProcedure_OUT_OUT_OUT(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_OUT_OUT_OUT");
        ProcedureOutOutOutResponse _result = procedureService.executeProcedure_OUT_OUT_OUT();
        LOGGER.debug("got the result for v1 named procedure: Procedure_OUT_OUT_OUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_IN_INOUT_OUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "IN - DATE INOUT- INT  OUT - DATE")
    public List<ProcedureInInoutOutResponse> executeProcedure_IN_INOUT_OUT(@RequestParam(value = "reqDate", required = false) Date reqDate, @RequestParam(value = "ordNumber", required = false) Integer ordNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_IN_INOUT_OUT");
        ProcedureInInoutOutResponse _result = procedureService.executeProcedure_IN_INOUT_OUT(reqDate, ordNumber);
        LOGGER.debug("got the result for v1 named procedure: Procedure_IN_INOUT_OUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_OUT_OUT_INOUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "OUT - STRING OUT - STRING  INOUT - INT")
    public List<ProcedureOutOutInoutResponse> executeProcedure_OUT_OUT_INOUT(@RequestParam(value = "empNumber", required = false) Integer empNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_OUT_OUT_INOUT");
        ProcedureOutOutInoutResponse _result = procedureService.executeProcedure_OUT_OUT_INOUT(empNumber);
        LOGGER.debug("got the result for v1 named procedure: Procedure_OUT_OUT_INOUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_IN_IN_INOUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "IN - DATE IN - INT  INOUT - DATE")
    public List<ProcedureInInInoutResponse> executeProcedure_IN_IN_INOUT(@RequestParam(value = "reqDate", required = false) Date reqDate, @RequestParam(value = "ordNumber", required = false) Integer ordNumber, @RequestParam(value = "shipDate", required = false) Date shipDate, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_IN_IN_INOUT");
        ProcedureInInInoutResponse _result = procedureService.executeProcedure_IN_IN_INOUT(reqDate, ordNumber, shipDate);
        LOGGER.debug("got the result for v1 named procedure: Procedure_IN_IN_INOUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_OUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "OUT - STRING")
    public List<ProcedureOutResponse> executeProcedure_OUT(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_OUT");
        ProcedureOutResponse _result = procedureService.executeProcedure_OUT();
        LOGGER.debug("got the result for v1 named procedure: Procedure_OUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_IN_STRING", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "IN - STRING")
    public List<ProcedureInStringResponseContent> executeProcedure_IN_STRING(@RequestParam(value = "countryname", required = false) String countryname, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_IN_STRING");
        ProcedureInStringResponse _result = procedureService.executeProcedure_IN_STRING(countryname);
        LOGGER.debug("got the result for v1 named procedure: Procedure_IN_STRING, result:{}", _result);
        return _result.getContent();
    }

    @RequestMapping(value = "/procedure/execute/Procedure_INOUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.UNAVAILABLE)
    @ApiOperation(value = "INOUT - INT")
    public List<ProcedureInoutResponse> executeProcedure_INOUT(@RequestParam(value = "empNumber", required = false) Integer empNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_INOUT");
        ProcedureInoutResponse _result = procedureService.executeProcedure_INOUT(empNumber);
        LOGGER.debug("got the result for v1 named procedure: Procedure_INOUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_INOUT_OUT", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "INOUT - INT OUT - STRING")
    public List<ProcedureInoutOutResponse> executeProcedure_INOUT_OUT(@RequestParam(value = "custnum", required = false) Integer custnum, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_INOUT_OUT");
        ProcedureInoutOutResponse _result = procedureService.executeProcedure_INOUT_OUT(custnum);
        LOGGER.debug("got the result for v1 named procedure: Procedure_INOUT_OUT, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_OUT_OUT_IN", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "OUT - STRING OUT - STRING IN - INT")
    public List<ProcedureOutOutInResponse> executeProcedure_OUT_OUT_IN(@RequestParam(value = "offCode", required = false) Integer offCode, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_OUT_OUT_IN");
        ProcedureOutOutInResponse _result = procedureService.executeProcedure_OUT_OUT_IN(offCode);
        LOGGER.debug("got the result for v1 named procedure: Procedure_OUT_OUT_IN, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/PROCEDURE_IN_OUT_IN", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.UNAVAILABLE)
    @ApiOperation(value = "IN - INT OUT - DOUBLE  IN - INT")
    public List<ProcedureInOutInResponse> executePROCEDURE_IN_OUT_IN(@RequestParam(value = "Numerator", required = false) Integer numerator, @RequestParam(value = "Denominator", required = false) Integer denominator, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: PROCEDURE_IN_OUT_IN");
        ProcedureInOutInResponse _result = procedureService.executePROCEDURE_IN_OUT_IN(numerator, denominator);
        LOGGER.debug("got the result for v1 named procedure: PROCEDURE_IN_OUT_IN, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/Procedure_IN", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.UNAVAILABLE)
    @ApiOperation(value = "Only IN - Int")
    public List<ProcedureInResponseContent> executeProcedure_IN(@RequestParam(value = "empNumber", required = false) Integer empNumber, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_IN");
        ProcedureInResponse _result = procedureService.executeProcedure_IN(empNumber);
        LOGGER.debug("got the result for v1 named procedure: Procedure_IN, result:{}", _result);
        return _result.getContent();
    }

    @RequestMapping(value = "/procedure/execute/Procedure_IN_IN_IN", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "IN- INT IN- INT IN- STRING")
    public List<ProcedureInInInResponseContent> executeProcedure_IN_IN_IN(@RequestParam(value = "art_id", required = false) Integer artId, @RequestParam(value = "tag_id", required = false) Integer tagId, @RequestParam(value = "blnak", required = false) String blnak, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_IN_IN_IN");
        ProcedureInInInResponse _result = procedureService.executeProcedure_IN_IN_IN(artId, tagId, blnak);
        LOGGER.debug("got the result for v1 named procedure: Procedure_IN_IN_IN, result:{}", _result);
        return _result.getContent();
    }

    @RequestMapping(value = "/procedure/execute/Procedure_getProductDetails", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.UNAVAILABLE)
    @ApiOperation(value = "egrzdvzf")
    public List<ProcedureGetProductDetailsResponseContent> executeProcedure_getProductDetails(@RequestParam(value = "prodLine", required = false) String prodLine, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_getProductDetails");
        ProcedureGetProductDetailsResponse _result = procedureService.executeProcedure_getProductDetails(prodLine);
        LOGGER.debug("got the result for v1 named procedure: Procedure_getProductDetails, result:{}", _result);
        return _result.getContent();
    }

}


