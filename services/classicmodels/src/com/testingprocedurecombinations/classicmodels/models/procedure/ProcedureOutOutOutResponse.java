/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testingprocedurecombinations.classicmodels.models.procedure;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.io.Serializable;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.wavemaker.runtime.data.annotations.ColumnAlias;

public class ProcedureOutOutOutResponse implements Serializable {


    @JsonProperty("Ship")
    @ColumnAlias("Ship")
    private Integer ship;

    @JsonProperty("Cancel")
    @ColumnAlias("Cancel")
    private Integer cancel;

    @JsonProperty("Resolve")
    @ColumnAlias("Resolve")
    private Integer resolve;

    @JsonProperty("Dispute")
    @ColumnAlias("Dispute")
    private Integer dispute;

    @JsonProperty("InProcess")
    @ColumnAlias("InProcess")
    private Integer inProcess;

    @JsonProperty("OnHold")
    @ColumnAlias("OnHold")
    private Integer onHold;

    public Integer getShip() {
        return this.ship;
    }

    public void setShip(Integer ship) {
        this.ship = ship;
    }

    public Integer getCancel() {
        return this.cancel;
    }

    public void setCancel(Integer cancel) {
        this.cancel = cancel;
    }

    public Integer getResolve() {
        return this.resolve;
    }

    public void setResolve(Integer resolve) {
        this.resolve = resolve;
    }

    public Integer getDispute() {
        return this.dispute;
    }

    public void setDispute(Integer dispute) {
        this.dispute = dispute;
    }

    public Integer getInProcess() {
        return this.inProcess;
    }

    public void setInProcess(Integer inProcess) {
        this.inProcess = inProcess;
    }

    public Integer getOnHold() {
        return this.onHold;
    }

    public void setOnHold(Integer onHold) {
        this.onHold = onHold;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ProcedureOutOutOutResponse)) return false;
        final ProcedureOutOutOutResponse procedureOutOutOutResponse = (ProcedureOutOutOutResponse) o;
        return Objects.equals(getShip(), procedureOutOutOutResponse.getShip()) &&
                Objects.equals(getCancel(), procedureOutOutOutResponse.getCancel()) &&
                Objects.equals(getResolve(), procedureOutOutOutResponse.getResolve()) &&
                Objects.equals(getDispute(), procedureOutOutOutResponse.getDispute()) &&
                Objects.equals(getInProcess(), procedureOutOutOutResponse.getInProcess()) &&
                Objects.equals(getOnHold(), procedureOutOutOutResponse.getOnHold());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getShip(),
                getCancel(),
                getResolve(),
                getDispute(),
                getInProcess(),
                getOnHold());
    }
}
