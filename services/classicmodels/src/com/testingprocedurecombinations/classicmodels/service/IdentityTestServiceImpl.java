/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testingprocedurecombinations.classicmodels.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingprocedurecombinations.classicmodels.IdentityTest;


/**
 * ServiceImpl object for domain model class IdentityTest.
 *
 * @see IdentityTest
 */
@Service("classicmodels.IdentityTestService")
@Validated
public class IdentityTestServiceImpl implements IdentityTestService {

    private static final Logger LOGGER = LoggerFactory.getLogger(IdentityTestServiceImpl.class);


    @Autowired
    @Qualifier("classicmodels.IdentityTestDao")
    private WMGenericDao<IdentityTest, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<IdentityTest, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
	public IdentityTest create(IdentityTest identityTest) {
        LOGGER.debug("Creating a new IdentityTest with information: {}", identityTest);
        IdentityTest identityTestCreated = this.wmGenericDao.create(identityTest);
        return identityTestCreated;
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public IdentityTest getById(String identitytestId) throws EntityNotFoundException {
        LOGGER.debug("Finding IdentityTest by id: {}", identitytestId);
        IdentityTest identityTest = this.wmGenericDao.findById(identitytestId);
        if (identityTest == null){
            LOGGER.debug("No IdentityTest found with id: {}", identitytestId);
            throw new EntityNotFoundException(String.valueOf(identitytestId));
        }
        return identityTest;
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public IdentityTest findById(String identitytestId) {
        LOGGER.debug("Finding IdentityTest by id: {}", identitytestId);
        return this.wmGenericDao.findById(identitytestId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "classicmodelsTransactionManager")
	@Override
	public IdentityTest update(IdentityTest identityTest) throws EntityNotFoundException {
        LOGGER.debug("Updating IdentityTest with information: {}", identityTest);
        this.wmGenericDao.update(identityTest);

        String identitytestId = identityTest.getColumn3();

        return this.wmGenericDao.findById(identitytestId);
    }

    @Transactional(value = "classicmodelsTransactionManager")
	@Override
	public IdentityTest delete(String identitytestId) throws EntityNotFoundException {
        LOGGER.debug("Deleting IdentityTest with id: {}", identitytestId);
        IdentityTest deleted = this.wmGenericDao.findById(identitytestId);
        if (deleted == null) {
            LOGGER.debug("No IdentityTest found with id: {}", identitytestId);
            throw new EntityNotFoundException(String.valueOf(identitytestId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public Page<IdentityTest> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all IdentityTests");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<IdentityTest> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all IdentityTests");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service classicmodels for table IdentityTest to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

