/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testingprocedurecombinations.classicmodels.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingprocedurecombinations.classicmodels.TempTimeCheck;


/**
 * ServiceImpl object for domain model class TempTimeCheck.
 *
 * @see TempTimeCheck
 */
@Service("classicmodels.TempTimeCheckService")
@Validated
public class TempTimeCheckServiceImpl implements TempTimeCheckService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TempTimeCheckServiceImpl.class);


    @Autowired
    @Qualifier("classicmodels.TempTimeCheckDao")
    private WMGenericDao<TempTimeCheck, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TempTimeCheck, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
	public TempTimeCheck create(TempTimeCheck tempTimeCheck) {
        LOGGER.debug("Creating a new TempTimeCheck with information: {}", tempTimeCheck);
        TempTimeCheck tempTimeCheckCreated = this.wmGenericDao.create(tempTimeCheck);
        return tempTimeCheckCreated;
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public TempTimeCheck getById(Integer temptimecheckId) throws EntityNotFoundException {
        LOGGER.debug("Finding TempTimeCheck by id: {}", temptimecheckId);
        TempTimeCheck tempTimeCheck = this.wmGenericDao.findById(temptimecheckId);
        if (tempTimeCheck == null){
            LOGGER.debug("No TempTimeCheck found with id: {}", temptimecheckId);
            throw new EntityNotFoundException(String.valueOf(temptimecheckId));
        }
        return tempTimeCheck;
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public TempTimeCheck findById(Integer temptimecheckId) {
        LOGGER.debug("Finding TempTimeCheck by id: {}", temptimecheckId);
        return this.wmGenericDao.findById(temptimecheckId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "classicmodelsTransactionManager")
	@Override
	public TempTimeCheck update(TempTimeCheck tempTimeCheck) throws EntityNotFoundException {
        LOGGER.debug("Updating TempTimeCheck with information: {}", tempTimeCheck);
        this.wmGenericDao.update(tempTimeCheck);

        Integer temptimecheckId = tempTimeCheck.getId();

        return this.wmGenericDao.findById(temptimecheckId);
    }

    @Transactional(value = "classicmodelsTransactionManager")
	@Override
	public TempTimeCheck delete(Integer temptimecheckId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TempTimeCheck with id: {}", temptimecheckId);
        TempTimeCheck deleted = this.wmGenericDao.findById(temptimecheckId);
        if (deleted == null) {
            LOGGER.debug("No TempTimeCheck found with id: {}", temptimecheckId);
            throw new EntityNotFoundException(String.valueOf(temptimecheckId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public Page<TempTimeCheck> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TempTimeChecks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<TempTimeCheck> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TempTimeChecks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service classicmodels for table TempTimeCheck to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

