/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testingprocedurecombinations.classicmodels.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingprocedurecombinations.classicmodels.TestIssue;


/**
 * ServiceImpl object for domain model class TestIssue.
 *
 * @see TestIssue
 */
@Service("classicmodels.TestIssueService")
@Validated
public class TestIssueServiceImpl implements TestIssueService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestIssueServiceImpl.class);


    @Autowired
    @Qualifier("classicmodels.TestIssueDao")
    private WMGenericDao<TestIssue, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TestIssue, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
	public TestIssue create(TestIssue testIssue) {
        LOGGER.debug("Creating a new TestIssue with information: {}", testIssue);
        TestIssue testIssueCreated = this.wmGenericDao.create(testIssue);
        return testIssueCreated;
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public TestIssue getById(Integer testissueId) throws EntityNotFoundException {
        LOGGER.debug("Finding TestIssue by id: {}", testissueId);
        TestIssue testIssue = this.wmGenericDao.findById(testissueId);
        if (testIssue == null){
            LOGGER.debug("No TestIssue found with id: {}", testissueId);
            throw new EntityNotFoundException(String.valueOf(testissueId));
        }
        return testIssue;
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public TestIssue findById(Integer testissueId) {
        LOGGER.debug("Finding TestIssue by id: {}", testissueId);
        return this.wmGenericDao.findById(testissueId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "classicmodelsTransactionManager")
	@Override
	public TestIssue update(TestIssue testIssue) throws EntityNotFoundException {
        LOGGER.debug("Updating TestIssue with information: {}", testIssue);
        this.wmGenericDao.update(testIssue);

        Integer testissueId = testIssue.getId();

        return this.wmGenericDao.findById(testissueId);
    }

    @Transactional(value = "classicmodelsTransactionManager")
	@Override
	public TestIssue delete(Integer testissueId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TestIssue with id: {}", testissueId);
        TestIssue deleted = this.wmGenericDao.findById(testissueId);
        if (deleted == null) {
            LOGGER.debug("No TestIssue found with id: {}", testissueId);
            throw new EntityNotFoundException(String.valueOf(testissueId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public Page<TestIssue> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TestIssues");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<TestIssue> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TestIssues");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service classicmodels for table TestIssue to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

